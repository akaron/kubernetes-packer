apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - image: grafana/grafana
        imagePullPolicy: Always
        name: grafana
        volumeMounts:
          - name: provision-datasource-prometheus
            mountPath: /etc/grafana/provisioning/datasources/datasource-prometheus.yaml
            subPath: datasource-prometheus.yaml
          - name: provision-dashboards
            mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
            subPath: dashboards.yaml
          - name: dashboards-node-dashboard
            mountPath: /var/lib/grafana/dashboards/node-dashboard.json
            subPath: node-dashboard.json
      volumes:
        - name: provision-datasource-prometheus
          valueFrom:
            configMapKeyRef:
              name: provision
              key: datasource-prometheus
              defaultMode: 0644
        - name: provision-dashboards
          valueFrom:
            configMapKeyRef:
              name: provision
              key: dashboards
              defaultMode: 0644
        - name: dashboards-node-dashboard
          valueFrom:
            configMapKeyRef:
              name: dashboards
              key: node-dashboard
              defaultMode: 0644

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30300
